<div class="container py-5">
  <div class="col-lg-8 offset-lg-2">
    <h1>Welcome ðŸ‘‹</h1>
    <p class="lead">
      Main Street is a platform that helps entrepreneurs start and run their companies
      in the service industry. For now it's Painting, but in the future we hope to address
      many other services such as Lawncare, Pest Control, Plumbing, Electrical etc.
    </p>

    <p>
      This bare-bones app represents a small piece of Main Street's core platform.
      Included is a scaffold for one model, <mark>Company</mark>. The spirit of this
      code-challenge is to extend this app's functionality in interesting ways.
    </p>

    <p>
      If you navigate to <%= link_to companies_path, "/companies" %>, you'll see a list of
      companies generated from running <mark>bin/setup</mark>. You can think of this as a
      sort of "admin" view. As an admin, you are able to view, create, and edit companies.
      There would be different roles in a production version of this app. For example, a
      <mark>Company</mark> might belong to an <mark>Owner</mark>.
    </p>

    <ul class="my-5 list-group">
      <li class="list-group-item">
        <h2><strong>Tasks</strong></h2>
      </li>
      <li class="list-group-item">
        <h5>Display an Association</h5>
        <p>
          Come up with an association for the <mark>Company</mark> model. For example, companies
          often have many <em>customers</em>.
        </p>
        <p>
          Once you have decided on your association, display this data in an interesting way.
        </p>
        <p>
          <span class="badge badge-dark">data modeling</span>
          <span class="badge badge-dark">Rails best practices</span>
        </p>
      </li>
      <li class="list-group-item">
        <h5>JavaScript Interactivity</h5>
        <p>
          Aside from the Turbolinks magic, the current app has very little JavaScript
          added to it. On the <mark>Company#show</mark> page, the user is able to copy
          and paste the phone number in the "Contact" section. Use JavaScript to add
          more interactivity to the page. Fulfilling this requirement might overlap with
          the UI added from the first task.
        </p>
        <p>
          <span class="badge badge-dark">JavaScript</span>
        </p>
      </li>
      <li class="list-group-item">
        <h5>Create an Issue</h5>
        <p>
          Create a new markdown file at the root of this directory named <mark>ISSUE.md</mark>.
          Write up an issue as if you were a technical lead and needed to delegate a piece
          of work to another engineer on your team.
        </p>
        <p>
          The issue itself can be anything you want. Maybe you want to extend this app in a
          certain way by adding a third party library; maybe you want to write up a ticket
          for replacing MiniTest with RSpec. Be clear and provide as much context as you normally
          would.
        </p>
        <p>
          <span class="badge badge-dark">communication</span>
        </p>
      </li>
      <li class="list-group-item bg-secondary text-white">
        <h5>Tips</h5>
        <ul>
          <li>Submit your PR as you would in a professional environment</li>
          <li>Keep your commit history and your diffs clean</li>
          <li><strong>Write tests</strong></li>
        </ul>
      </li>
    </ul>
  </div>
</div>
