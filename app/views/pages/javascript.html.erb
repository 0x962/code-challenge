<div class="container py-5">
  <div class="col-lg-8 offset-lg-2">
    <a href="/" class="pb-3">Home</a>
    <h3>Stimulus JavaScript Examples</h3>
    <p>Our team leverages <a href="https://stimulusjs.org/">Stimulus.js</a> to handle our interactive elements.</p>
    <p><strong>Stimulus Benifits</strong><p>
      <ul>
        <li>Never worry about <code>.class</code> or <code>#id</code> selectors again</li>
        <li>Never worry about another eventlistener, for things like click or key up</li>
        <li>Data from JavaScript controllers is automatically bound to the UI</li>
        <li>As a team we have a consistent framework in the way we think about JavaScript interactvitiy.</li>
        <li>As a team We have a clear path to leveraging all the incredible NPM packages available through Yarn and WebPack JavaScript depency managment.</li>
      </ul>

    <hr class="py-2">

    <h3>Example Form</h3>
    <p>This view and the <code>app/javascript/controllers/example_controller.js</code> are intended to provide with a clear example of our best practices around interactvitiy and provide a jumping off point of how wire up JavaScript interactivity.</p>

    <div class="bg-light rounded p-4 my-2">
      <div data-controller="example">
        <div class="form-group">
          <label>Enter some text to transform it</label>
          <input data-target="example.textToReverse" data-action="keyup->example#entry" class="form-control" placeholder="Enter some text here..."></input>
        </div>
        <div class="form-group">
          <button class="btn btn-outline-secondary" data-target="example.inputWarning" disabled>Enter Text</button>
          <button class="btn btn-success d-none" data-action="click->example#reverse" data-target="example.button">Reverse</button>
          <button class="btn btn-outline-success d-none" data-action="click->example#uppercase" data-target="example.button">UPPERCASE</button>
        </div>
      </div>
      <div class="pt-2 text-muted">
        <p>Notable Features of this form</p>
        <ul>
          <li>The action buttons don't appear until there is text to trasnform</li>
          <li>The action buttons disapear when there no text to trasnform</li>
          <li>The input is transformed without page reloads</li>
          <li>The transform actions are composable, you can layer a reverse and an uppercase action</li>
        </ul>
      </div>
    </div>

    <div class="py-3">
      <h3>Breaking this Example Form down</h3>
      <h5 class="mt-3">Text entry input</h5>
      <p>The input has <code>data-target</code> and <code>data-actions</code> tied to it.</p>
      <div class="bg-light p-3 bg-rounded mb-3">
        <code>
          &lt;input <mark>data-target="example.textToReverse"</mark> <mark>data-action="keyup->example#entry"</mark> class="form-control" placeholder="Enter some text here...">&lt;/input&gt
        </code>
      </div>
      <ul>
        <li>The <code>data-target</code> and <code>data-action</code> bind the HTML to the controller automatically.</li>
        <li>When any text is entered the <code>entry</code> function from <code>example_controller</code> is run. This checks for the input length and shows and hides the buttons accordingly.</li>
        <li>Whenver the text needs to be trasnformed, the value can easily be captured or udpated using the <code>data-target="example.textToReverse"</code> attribute.</li>
      </ul>

      <h5 class="mt-3">Action Buttons</h5>
      <p>The buttons have <code>data-target</code> and <code>data-actions</code> tied to them.</p>
      <div class="bg-light p-3 bg-rounded mb-3">
        <code>
          &lt;button class="btn btn-success d-none" <mark>data-action="click->example#reverse"</mark> <mark>data-target="example.button"</mark>>Reverse&lt;/button&gt
        </code>
      </div>
      <ul>
        <li>Again, The <code>data-target</code> and <code>data-action</code> bind the HTML to the controller automatically.</li>
        <li>When there is input text to be transformed and the button is clicked the <code>reverse</code> function from <code>example_controller</code> is run.</li>
        <li>The <code>reverse</code> function can easily leverage the <code>data-target="example.textToReverse"</code> attribute from the input to grab the value, transform it and update it in the UI.</li>
        <li>The <code>data-target</code> on the buttons simply make it easy to show and hide the buttons as needed within the UI.</li>
      </ul>
    </div>

    <h3>Example Third Party Dependency</h3>
    <p>This view and the <code>app/javascript/controllers/tag_selector.js</code> are intended to provide with a clear example of our best practices around implementing third party JavaScript dependncies.</p>

    <div data-controller="tags" class="form-group">
        <label>Interactive Tags Selector</label>
        <%= select_tag :tags, options_for_select(["apple", "banana", "orange"]), multiple: true, "data-target": "tags.select2", class: "form-control" %>
      </div>

    <div class="py-3 mb-5">
      <h3>Breaking this Example Form down</h3>
      <ul>
        <li>leverageing NPM we are able to <code>yarn add select2</code> via console to bring in the dependency</li>
        <li>From there, we can then wire up a basic controller in <code>app/javascript/controllers/tag_selector.js</code> to bind the select2 library to the input.</li>
      </ul>
    </div>

</div>


</div>
